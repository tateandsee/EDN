import { PrismaClient } from '@prisma/client'
import fs from 'fs/promises'
import path from 'path'

const prisma = new PrismaClient()

async function verifyMarketplaceFix() {
  console.log('üîç VERIFYING MARKETPLACE IMAGE FIX')
  console.log('‚ïê'.repeat(60))

  try {
    // Get all marketplace items
    const items = await prisma.marketplaceItem.findMany({
      where: { status: 'ACTIVE' },
      orderBy: { createdAt: 'asc' }
    })

    console.log(`üì¶ Verifying ${items.length} marketplace items`)

    let validItems = 0
    let invalidItems = 0
    let issuesFound = []

    for (const item of items) {
      console.log(`\nüîç Verifying: ${item.title}`)
      console.log(`   ID: ${item.id}`)
      console.log(`   NSFW: ${item.isNsfw}`)
      
      let itemValid = true
      
      // Check thumbnail
      if (!item.thumbnail || item.thumbnail.trim() === '') {
        console.log(`   ‚ùå MISSING THUMBNAIL`)
        issuesFound.push(`Item ${item.title}: Missing thumbnail`)
        itemValid = false
      } else {
        try {
          new URL(item.thumbnail)
          if (item.thumbnail.startsWith('/marketplace-images/')) {
            console.log(`   ‚ùå INVALID THUMBNAIL URL: ${item.thumbnail}`)
            issuesFound.push(`Item ${item.title}: Invalid thumbnail URL - ${item.thumbnail}`)
            itemValid = false
          } else {
            console.log(`   ‚úÖ VALID THUMBNAIL: ${item.thumbnail.substring(0, 60)}...`)
          }
        } catch (e) {
          console.log(`   ‚ùå INVALID THUMBNAIL URL: ${item.thumbnail}`)
          issuesFound.push(`Item ${item.title}: Invalid thumbnail URL - ${item.thumbnail}`)
          itemValid = false
        }
      }
      
      // Check images array
      if (!item.images || item.images.trim() === '') {
        console.log(`   ‚ùå MISSING IMAGES ARRAY`)
        issuesFound.push(`Item ${item.title}: Missing images array`)
        itemValid = false
      } else {
        try {
          const parsedImages = JSON.parse(item.images)
          console.log(`   ‚úÖ Images array: ${parsedImages.length} images`)
          
          // Check if thumbnail matches first image in array
          if (item.thumbnail && parsedImages.length > 0) {
            if (item.thumbnail === parsedImages[0]) {
              console.log(`   ‚úÖ CONSISTENT: Thumbnail matches first image`)
            } else {
              console.log(`   ‚ùå INCONSISTENT: Thumbnail differs from first image`)
              issuesFound.push(`Item ${item.title}: Thumbnail inconsistent with gallery`)
              itemValid = false
            }
          }
          
          // Check image URLs for validity
          for (let j = 0; j < parsedImages.length; j++) {
            const imgUrl = parsedImages[j]
            try {
              new URL(imgUrl)
              if (imgUrl.startsWith('/marketplace-images/')) {
                console.log(`   ‚ùå INVALID IMAGE URL: ${imgUrl}`)
                issuesFound.push(`Item ${item.title}: Invalid image URL - ${imgUrl}`)
                itemValid = false
              } else {
                console.log(`   ‚úÖ VALID IMAGE URL: ${imgUrl.substring(0, 60)}...`)
              }
            } catch (e) {
              console.log(`   ‚ùå INVALID IMAGE URL: ${imgUrl}`)
              issuesFound.push(`Item ${item.title}: Invalid image URL - ${imgUrl}`)
              itemValid = false
            }
          }
        } catch (e) {
          console.log(`   ‚ùå ERROR PARSING IMAGES: ${e}`)
          issuesFound.push(`Item ${item.title}: Error parsing images array - ${e}`)
          itemValid = false
        }
      }
      
      if (itemValid) {
        validItems++
        console.log(`   ‚úÖ ITEM VALID`)
      } else {
        invalidItems++
        console.log(`   ‚ùå ITEM INVALID`)
      }
    }

    console.log('\nüìä VERIFICATION SUMMARY:')
    console.log('‚ïê'.repeat(40))
    console.log(`‚úÖ Valid items: ${validItems}`)
    console.log(`‚ùå Invalid items: ${invalidItems}`)
    console.log(`üìã Total issues found: ${issuesFound.length}`)

    if (issuesFound.length > 0) {
      console.log('\nüö® DETAILED ISSUES:')
      console.log('‚ïê'.repeat(40))
      issuesFound.forEach((issue, index) => {
        console.log(`${index + 1}. ${issue}`)
      })
    }

    // Check API endpoints
    console.log('\nüì° CHECKING API ENDPOINTS:')
    console.log('‚ïê'.repeat(40))

    // Check list API
    try {
      const listApiPath = path.join(process.cwd(), 'src', 'app', 'api', 'marketplace', 'items', 'route.ts')
      const listApiContent = await fs.readFile(listApiPath, 'utf8')
      
      if (listApiContent.includes('thumbnail') && listApiContent.includes('images')) {
        console.log('‚úÖ List API includes thumbnail and images fields')
      } else {
        console.log('‚ùå List API missing image fields')
        issuesFound.push('List API: Missing image fields')
      }
    } catch (e) {
      console.log(`‚ùå Error checking list API: ${e}`)
      issuesFound.push(`Cannot read list API: ${e}`)
    }

    // Check detail API
    try {
      const detailApiPath = path.join(process.cwd(), 'src', 'app', 'api', 'marketplace', 'items', '[id]', 'route.ts')
      const detailApiContent = await fs.readFile(detailApiPath, 'utf8')
      
      if (detailApiContent.includes('thumbnail: item.thumbnail') && detailApiContent.includes('images: item.images')) {
        console.log('‚úÖ Detail API includes thumbnail and images fields')
      } else {
        console.log('‚ùå Detail API missing image fields')
        issuesFound.push('Detail API: Missing image fields')
      }
    } catch (e) {
      console.log(`‚ùå Error checking detail API: ${e}`)
      issuesFound.push(`Cannot read detail API: ${e}`)
    }

    // Check frontend components
    console.log('\nüîß CHECKING FRONTEND COMPONENTS:')
    console.log('‚ïê'.repeat(40))

    // Check marketplace item card
    try {
      const cardComponent = await fs.readFile(path.join(process.cwd(), 'src', 'components', 'marketplace-item-card.tsx'), 'utf8')
      
      if (cardComponent.includes('item.thumbnail')) {
        console.log('‚úÖ Marketplace item card uses item.thumbnail')
      } else {
        console.log('‚ùå Marketplace item card does not use item.thumbnail')
        issuesFound.push('Marketplace item card: Does not use item.thumbnail')
      }
    } catch (e) {
      console.log(`‚ùå Error reading marketplace-item-card.tsx: ${e}`)
      issuesFound.push(`Cannot read marketplace-item-card.tsx: ${e}`)
    }

    // Check individual item page
    try {
      const detailPage = await fs.readFile(path.join(process.cwd(), 'src', 'app', 'marketplace', '[id]', 'page.tsx'), 'utf8')
      
      if (detailPage.includes('item.images?.[0] || item.thumbnail')) {
        console.log('‚úÖ Individual item page uses proper image fallback logic')
      } else {
        console.log('‚ùå Individual item page does not use proper image fallback logic')
        issuesFound.push('Individual item page: Incorrect image fallback logic')
      }
    } catch (e) {
      console.log(`‚ùå Error reading individual item page: ${e}`)
      issuesFound.push(`Cannot read individual item page: ${e}`)
    }

    console.log('\nüéØ FINAL VERIFICATION RESULT:')
    console.log('‚ïê'.repeat(40))
    
    if (issuesFound.length === 0) {
      console.log('‚úÖ NO ISSUES FOUND - MARKETPLACE IS LAUNCH READY!')
      console.log('\nüéâ ALL SYSTEMS GO!')
      console.log('‚úÖ All images are valid and accessible')
      console.log('‚úÖ Images are consistent between cards and detail pages')
      console.log('‚úÖ API endpoints include all required image fields')
      console.log('‚úÖ Frontend components use correct image data')
    } else {
      console.log(`‚ùå ${issuesFound.length} ISSUES FOUND - NEEDS ATTENTION`)
      console.log('\nüìã REQUIRED ACTIONS:')
      console.log('1. Review and fix all listed issues')
      console.log('2. Re-run verification after fixes')
      console.log('3. Test end-to-end functionality')
    }

    return {
      validItems,
      invalidItems,
      totalItems: items.length,
      issuesFound,
      isLaunchReady: issuesFound.length === 0
    }

  } catch (error) {
    console.error('‚ùå Error verifying marketplace fix:', error)
    throw error
  }
}

// Main execution
async function main() {
  try {
    console.log('üöÄ STARTING MARKETPLACE VERIFICATION')
    console.log('‚ïê'.repeat(60))
    
    const result = await verifyMarketplaceFix()
    
    console.log('\nüìä FINAL STATISTICS:')
    console.log('‚ïê'.repeat(40))
    console.log(`Valid items: ${result.validItems}/${result.totalItems} (${((result.validItems / result.totalItems) * 100).toFixed(1)}%)`)
    console.log(`Issues found: ${result.issuesFound.length}`)
    console.log(`Launch ready: ${result.isLaunchReady ? 'YES' : 'NO'}`)
    
    if (result.isLaunchReady) {
      console.log('\nüéâ CONGRATULATIONS!')
      console.log('The marketplace is now launch-ready with consistent, valid images throughout!')
    } else {
      console.log('\n‚ö†Ô∏è  ACTION REQUIRED')
      console.log('Please address the issues listed above before launching.')
    }
    
  } catch (error) {
    console.error('‚ùå CRITICAL ERROR:', error)
    process.exit(1)
  }
}

main()
  .catch((e) => {
    console.error('‚ùå Error in verification:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })