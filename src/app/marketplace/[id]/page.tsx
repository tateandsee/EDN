'use client'

import { useState, useEffect } from 'react'
import { useParams } from 'next/navigation'
import Link from 'next/link'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { useNSFW } from '@/contexts/nsfw-context'
import { useAuth } from '@/contexts/auth-context'
import { 
  ShoppingCart, 
  Eye, 
  Star, 
  Heart, 
  Share2, 
  Download,
  Package,
  User,
  ArrowLeft,
  Shield,
  Sparkles
} from 'lucide-react'

interface MarketplaceItem {
  id: string
  title: string
  description: string
  type: string
  category: string
  price: number
  currency: string
  status: string
  thumbnail?: string
  images?: string[]
  tags?: string[]
  isNsfw: boolean
  userId: string
  user?: {
    id: string
    name: string
    screenName?: string
    avatar?: string
    verified: boolean
  }
  reviews?: Array<{
    rating: number
    comment: string
    createdAt: string
    user: {
      name: string
      avatar?: string
    }
  }>
  _count?: {
    reviews: number
    orders: number
  }
  displayTitle?: string
  isAutoGenerated?: boolean
  promptConfig?: any
  positivePrompt?: string
  negativePrompt?: string
  fullPrompt?: string
}

export default function MarketplaceItemPage() {
  const params = useParams()
  const { user } = useAuth()
  const nsfwContext = useNSFW()
  const isNSFW = nsfwContext?.isNSFW ?? true
  
  const [item, setItem] = useState<MarketplaceItem | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [selectedImageIndex, setSelectedImageIndex] = useState(0)

  useEffect(() => {
    const fetchItem = async () => {
      try {
        const response = await fetch(`/api/marketplace/items/${params.id}`)
        if (response.ok) {
          const data = await response.json()
          setItem(data.item)
        } else {
          setError('Failed to fetch marketplace item')
        }
      } catch (error) {
        console.error('Error fetching marketplace item:', error)
        setError('Failed to fetch marketplace item')
      } finally {
        setLoading(false)
      }
    }

    if (params.id) {
      fetchItem()
    }
  }, [params.id])

  // Parse images and tags
  const parsedImages = item?.images ? (typeof item.images === 'string' ? JSON.parse(item.images) : item.images) : []
  const parsedTags = item?.tags ? (typeof item.tags === 'string' ? JSON.parse(item.tags) : item.tags) : []

  // Calculate average rating
  const averageRating = item?.reviews && item.reviews.length > 0 
    ? item.reviews.reduce((sum, review) => sum + review.rating, 0) / item.reviews.length 
    : 0

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: item?.currency || 'USD'
    }).format(price)
  }

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'AI_MODEL':
        return <Sparkles className="h-4 w-4" />
      case 'PROMPT':
        return <Package className="h-4 w-4" />
      case 'DIGITAL_GOOD':
        return <Download className="h-4 w-4" />
      default:
        return <Package className="h-4 w-4" />
    }
  }

  const getTypeLabel = (type: string) => {
    switch (type) {
      case 'AI_MODEL':
        return 'AI Model'
      case 'PROMPT':
        return 'Prompt'
      case 'DIGITAL_GOOD':
        return 'Digital Good'
      default:
        return type
    }
  }

  // Color schemes
  const sfwColors = {
    primary: '#FF6B35',
    secondary: '#4ECDC4',
    cardBg: 'rgba(255, 255, 255, 0.95)',
    cardBorder: 'rgba(0, 0, 0, 0.15)',
    textPrimary: '#1A202C',
    textSecondary: '#4A5568',
    textLight: '#718096',
    buttonBg: '#FF6B35',
    buttonText: '#FFFFFF'
  }

  const nsfwColors = {
    primary: '#FF1493',
    secondary: '#00CED1',
    cardBg: 'rgba(30, 0, 30, 0.9)',
    cardBorder: 'rgba(255, 20, 147, 0.6)',
    textPrimary: '#FFFFFF',
    textSecondary: '#F0F0F0',
    textLight: '#D0D0D0',
    buttonBg: '#FF1493',
    buttonText: '#FFFFFF'
  }

  const colors = isNSFW ? nsfwColors : sfwColors

  if (loading) {
    return (
      <div className={`min-h-screen flex items-center justify-center ${isNSFW ? 'bg-gradient-to-br from-pink-900 via-purple-900 to-red-900' : 'bg-gradient-to-br from-orange-200 via-cyan-200 to-yellow-200'}`}>
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-white mx-auto mb-4"></div>
          <p className={isNSFW ? 'text-white' : 'text-gray-800'}>Loading item details...</p>
        </div>
      </div>
    )
  }

  if (error || !item) {
    return (
      <div className={`min-h-screen flex items-center justify-center ${isNSFW ? 'bg-gradient-to-br from-pink-900 via-purple-900 to-red-900' : 'bg-gradient-to-br from-orange-200 via-cyan-200 to-yellow-200'}`}>
        <div className="text-center max-w-md">
          <h1 className={`text-2xl font-bold mb-4 ${isNSFW ? 'text-white' : 'text-gray-800'}`}>
            Item Not Found
          </h1>
          <p className={`mb-6 ${isNSFW ? 'text-pink-200' : 'text-gray-600'}`}>
            The marketplace item you're looking for doesn't exist or has been removed.
          </p>
          <Link href="/marketplace">
            <Button 
              style={{ 
                backgroundColor: colors.buttonBg, 
                color: colors.buttonText 
              }}
            >
              <ArrowLeft className="mr-2 h-4 w-4" />
              Back to Marketplace
            </Button>
          </Link>
        </div>
      </div>
    )
  }

  // Hide NSFW items in SFW mode
  if (item.isNsfw && !isNSFW) {
    return (
      <div className={`min-h-screen flex items-center justify-center ${isNSFW ? 'bg-gradient-to-br from-pink-900 via-purple-900 to-red-900' : 'bg-gradient-to-br from-orange-200 via-cyan-200 to-yellow-200'}`}>
        <div className="text-center max-w-md">
          <h1 className={`text-2xl font-bold mb-4 ${isNSFW ? 'text-white' : 'text-gray-800'}`}>
            Content Restricted
          </h1>
          <p className={`mb-6 ${isNSFW ? 'text-pink-200' : 'text-gray-600'}`}>
            This content is only available in NSFW mode. Please enable NSFW mode to view this item.
          </p>
          <Button 
            onClick={() => nsfwContext?.toggleMode()}
            style={{ 
              backgroundColor: colors.buttonBg, 
              color: colors.buttonText 
            }}
          >
            Enable NSFW Mode
          </Button>
        </div>
      </div>
    )
  }

  return (
    <div className={`min-h-screen ${isNSFW ? 'bg-gradient-to-br from-pink-900 via-purple-900 to-red-900' : 'bg-gradient-to-br from-orange-200 via-cyan-200 to-yellow-200'}`}>
      <div className="container mx-auto px-4 py-8">
        {/* Breadcrumb */}
        <div className="mb-6">
          <Link href="/marketplace" className={`flex items-center ${isNSFW ? 'text-pink-300 hover:text-pink-100' : 'text-orange-600 hover:text-orange-800'}`}>
            <ArrowLeft className="mr-2 h-4 w-4" />
            Back to Marketplace
          </Link>
        </div>

        <div className="grid lg:grid-cols-2 gap-8">
          {/* Images Section */}
          <div className="space-y-4">
            {/* Main Image */}
            <div className="relative aspect-square overflow-hidden rounded-lg" style={{ backgroundColor: colors.cardBg, border: `1px solid ${colors.cardBorder}` }}>
              {parsedImages[selectedImageIndex] ? (
                <img 
                  src={parsedImages[selectedImageIndex]} 
                  alt={item.displayTitle || item.title}
                  className="w-full h-full object-contain"
                  onContextMenu={(e) => e.preventDefault()}
                  onDragStart={(e) => e.preventDefault()}
                />
              ) : (
                <div className="w-full h-full flex items-center justify-center">
                  <Package className="h-24 w-24" style={{ color: colors.primary }} />
                </div>
              )}
              
              {/* Protection Overlay */}
              <div className="absolute bottom-2 right-2 bg-black/60 text-white text-xs px-2 py-1 rounded flex items-center">
                <Shield className="h-3 w-3 mr-1" />
                EDN Protected
              </div>
            </div>

            {/* Thumbnail Gallery */}
            {parsedImages.length > 1 && (
              <div className="grid grid-cols-4 gap-2">
                {parsedImages.map((image, index) => (
                  <button
                    key={index}
                    onClick={() => setSelectedImageIndex(index)}
                    className={`aspect-square rounded overflow-hidden border-2 transition-all ${
                      selectedImageIndex === index 
                        ? 'border-blue-500 scale-105' 
                        : 'border-gray-300 hover:border-gray-400'
                    }`}
                    style={{ backgroundColor: colors.cardBg }}
                  >
                    <img 
                      src={image} 
                      alt={`${item.title} view ${index + 1}`}
                      className="w-full h-full object-cover"
                    />
                  </button>
                ))}
              </div>
            )}
          </div>

          {/* Details Section */}
          <div className="space-y-6">
            {/* Header */}
            <div>
              <div className="flex items-start justify-between mb-2">
                <h1 className={`text-3xl font-bold ${isNSFW ? 'text-white' : 'text-gray-900'}`}>
                  {item.displayTitle || item.title}
                </h1>
                <div className="text-right">
                  <div className={`text-3xl font-bold ${isNSFW ? 'text-pink-400' : 'text-orange-600'}`}>
                    {formatPrice(item.price)}
                  </div>
                  {item._count?.orders && item._count.orders > 0 && (
                    <div className={`text-sm ${isNSFW ? 'text-pink-200' : 'text-gray-600'}`}>
                      {item._count.orders} sold
                    </div>
                  )}
                </div>
              </div>
              
              <div className="flex items-center gap-2 mb-4">
                {getTypeIcon(item.type)}
                <span className={`font-medium ${isNSFW ? 'text-pink-300' : 'text-orange-600'}`}>
                  {getTypeLabel(item.type)}
                </span>
                {item.isNsfw && (
                  <Badge variant="destructive" className="text-xs">
                    NSFW
                  </Badge>
                )}
              </div>
            </div>

            {/* Creator Info */}
            <Card style={{ backgroundColor: colors.cardBg, borderColor: colors.cardBorder }}>
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
                  {item.user?.avatar ? (
                    <img 
                      src={item.user.avatar} 
                      alt={item.user.name} 
                      className="w-12 h-12 rounded-full object-cover"
                    />
                  ) : (
                    <div className="w-12 h-12 rounded-full flex items-center justify-center" style={{ backgroundColor: colors.primary }}>
                      <User className="h-6 w-6 text-white" />
                    </div>
                  )}
                  <div className="flex-1">
                    <div className="flex items-center gap-2">
                      <h3 className={`font-semibold ${isNSFW ? 'text-white' : 'text-gray-900'}`}>
                        {item.user?.name || 'Unknown Creator'}
                      </h3>
                      {item.user?.verified && (
                        <Badge variant="outline" className="text-xs">
                          ✓
                        </Badge>
                      )}
                    </div>
                    <p className={`text-sm ${isNSFW ? 'text-pink-200' : 'text-gray-600'}`}>
                      Premium AI Model Creator
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Description */}
            <Card style={{ backgroundColor: colors.cardBg, borderColor: colors.cardBorder }}>
              <CardHeader>
                <CardTitle className={isNSFW ? 'text-white' : 'text-gray-900'}>
                  Description
                </CardTitle>
              </CardHeader>
              <CardContent>
                <p className={isNSFW ? 'text-pink-100' : 'text-gray-700'}>
                  {item.description}
                </p>
              </CardContent>
            </Card>

            {/* Tags */}
            {parsedTags.length > 0 && (
              <Card style={{ backgroundColor: colors.cardBg, borderColor: colors.cardBorder }}>
                <CardHeader>
                  <CardTitle className={isNSFW ? 'text-white' : 'text-gray-900'}>
                    Tags
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="flex flex-wrap gap-2">
                    {parsedTags.map((tag, index) => (
                      <Badge 
                        key={index} 
                        variant="outline" 
                        className="text-xs"
                        style={{ 
                          borderColor: colors.cardBorder,
                          color: colors.textLight 
                        }}
                      >
                        {tag}
                      </Badge>
                    ))}
                  </div>
                </CardContent>
              </Card>
            )}

            {/* AI Model Details */}
            {item.type === 'AI_MODEL' && (
              <Card style={{ backgroundColor: colors.cardBg, borderColor: colors.cardBorder }}>
                <CardHeader>
                  <CardTitle className={isNSFW ? 'text-white' : 'text-gray-900'}>
                    AI Model Details
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  {item.positivePrompt && (
                    <div>
                      <h4 className={`text-sm font-medium mb-1 ${isNSFW ? 'text-pink-300' : 'text-orange-600'}`}>
                        Positive Prompt
                      </h4>
                      <p className={`text-xs p-2 rounded ${isNSFW ? 'bg-pink-900/50 text-pink-100' : 'bg-orange-100 text-orange-800'}`}>
                        {item.positivePrompt}
                      </p>
                    </div>
                  )}
                  {item.negativePrompt && (
                    <div>
                      <h4 className={`text-sm font-medium mb-1 ${isNSFW ? 'text-pink-300' : 'text-orange-600'}`}>
                        Negative Prompt
                      </h4>
                      <p className={`text-xs p-2 rounded ${isNSFW ? 'bg-pink-900/50 text-pink-100' : 'bg-orange-100 text-orange-800'}`}>
                        {item.negativePrompt}
                      </p>
                    </div>
                  )}
                </CardContent>
              </Card>
            )}

            {/* Rating */}
            <div className="flex items-center gap-2">
              <Star className="h-5 w-5 fill-yellow-400 text-yellow-400" />
              <span className={`font-medium ${isNSFW ? 'text-white' : 'text-gray-900'}`}>
                {averageRating > 0 ? averageRating.toFixed(1) : 'New'}
              </span>
              {item._count?.reviews && item._count.reviews > 0 && (
                <span className={`text-sm ${isNSFW ? 'text-pink-200' : 'text-gray-600'}`}>
                  ({item._count.reviews} review{item._count.reviews !== 1 ? 's' : ''})
                </span>
              )}
            </div>

            {/* Action Buttons */}
            <div className="flex gap-4">
              <Button 
                className="flex-1"
                style={{ 
                  backgroundColor: colors.buttonBg, 
                  color: colors.buttonText 
                }}
              >
                <ShoppingCart className="mr-2 h-4 w-4" />
                Buy Now
              </Button>
              
              <Button 
                variant="outline"
                className="flex-1"
                style={{ 
                  borderColor: colors.primary,
                  color: colors.primary 
                }}
              >
                <Heart className="mr-2 h-4 w-4" />
                Save
              </Button>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}