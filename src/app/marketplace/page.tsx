'use client'

import { useState, useEffect } from 'react'
import Link from 'next/link'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Input } from '@/components/ui/input'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { useNSFW } from '@/contexts/nsfw-context'
import { useAuth } from '@/contexts/auth-context'
import AgeVerificationModal from '@/components/age-verification-modal'
import MarketplaceItemCard from '@/components/marketplace-item-card'
import { 
  Sparkles, 
  Plus, 
  Upload, 
  Search,
  Filter,
  Package,
  ShoppingCart,
  Store,
  RefreshCw,
  Info,
  Loader2,
  Lock,
  AlertTriangle
} from 'lucide-react'

interface MarketplaceItem {
  id: string
  title: string
  description: string
  type: string
  category: string
  price: number
  currency: string
  status: string
  thumbnail?: string
  images?: string[]
  tags?: string[]
  isNsfw: boolean
  userId: string
  user?: {
    id: string
    name: string
    avatar?: string
    verified: boolean
  }
  reviews?: Array<{
    rating: number
    comment: string
    createdAt: string
    user: {
      name: string
      avatar?: string
    }
  }>
  _count?: {
    reviews: number
    orders: number
  }
  displayTitle?: string
  isAutoGenerated?: boolean
}

export default function MarketplacePage() {
  const nsfwContext = useNSFW()
  const isNSFW = nsfwContext?.isNSFW ?? false
  const isAgeVerified = nsfwContext?.isAgeVerified ?? false
  const showAgeVerification = nsfwContext?.showAgeVerification ?? false
  const setShowAgeVerification = nsfwContext?.setShowAgeVerification ?? (() => {})
  const setIsNSFW = nsfwContext?.setIsNSFW ?? (() => {})
  const canBypassRestrictions = nsfwContext?.canBypassRestrictions ?? false
  const { user } = useAuth()
  const [activeTab, setActiveTab] = useState('browse')
  const [items, setItems] = useState<MarketplaceItem[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  
  // Filter states
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedCategory, setSelectedCategory] = useState('all') // Start with 'all' to avoid timing issues
  const [selectedType, setSelectedType] = useState('all')
  const [minPrice, setMinPrice] = useState('')
  const [maxPrice, setMaxPrice] = useState('')
  
  // Pagination states
  const [currentPage, setCurrentPage] = useState(1)
  const [totalPages, setTotalPages] = useState(1)
  const [totalItems, setTotalItems] = useState(0)
  const [itemsPerPage, setItemsPerPage] = useState(12)
  
  // Sub-category states
  const [selectedEthnicity, setSelectedEthnicity] = useState('all')
  const [selectedHairColor, setSelectedHairColor] = useState('all')
  const [selectedBodyType, setSelectedBodyType] = useState('all')
  const [selectedAttire, setSelectedAttire] = useState('all')

  // Check if user can access NSFW content
  const canAccessNSFW = canBypassRestrictions || (user && isAgeVerified)

  // Handle NSFW mode change with age verification
  const handleNSFWModeChange = (newMode: boolean) => {
    if (newMode && !canAccessNSFW) {
      if (!user && !canBypassRestrictions) {
        // Redirect to sign in if not logged in and not admin/dev mode
        window.location.href = '/auth/signin'
        return
      }
      // Show age verification modal only if not bypassing restrictions
      if (!canBypassRestrictions) {
        setShowAgeVerification(true)
        return
      }
    }
    setIsNSFW(newMode)
  }
  
  const sfwColors = {
    primary: '#FF6B35', // vibrant coral orange
    secondary: '#4ECDC4', // bright turquoise
    accent: '#FFE66D', // golden yellow
    bg: 'from-orange-200 via-cyan-200 to-yellow-200',
    particle: '#FF6B35',
    cardBg: 'rgba(255, 255, 255, 0.9)',
    cardBorder: 'rgba(0, 0, 0, 0.1)',
    textPrimary: '#1A202C', // dark gray
    textSecondary: '#2D3748', // medium gray
    textLight: '#4A5568', // light gray
    textOnWhite: '#2D3748' // text on white backgrounds
  }

  const nsfwColors = {
    primary: '#FF1493', // deep hot pink
    secondary: '#00CED1', // dark turquoise
    accent: '#FF1744', // vibrant red
    bg: 'from-pink-900 via-purple-900 to-red-900',
    particle: '#FF69B4',
    cardBg: 'rgba(30, 0, 30, 0.85)',
    cardBorder: 'rgba(255, 20, 147, 0.5)',
    textPrimary: '#FFFFFF',
    textSecondary: '#E0E0E0',
    textLight: '#B0B0B0',
    textOnWhite: '#FFFFFF'
  }

  const colors = isNSFW ? nsfwColors : sfwColors

  // Ethnicity options
  const ethnicityOptions = [
    { value: 'all', label: 'All Ethnicities' },
    { value: 'asian', label: 'Asian' },
    { value: 'caucasian', label: 'Caucasian' },
    { value: 'mixed-race', label: 'Mixed Race' },
    { value: 'persian', label: 'Persian' }
  ]

  // Hair color options
  const hairColorOptions = [
    { value: 'all', label: 'All Hair Colors' },
    { value: 'blonde', label: 'Blonde' },
    { value: 'dark_hair', label: 'Dark Hair' },
    { value: 'red_hair', label: 'Red Hair' },
    { value: 'grey_hair', label: 'Grey Hair' }
  ]

  // Body type options
  const bodyTypeOptions = [
    { value: 'all', label: 'All Body Types' },
    { value: 'fit_and_toned', label: 'Fit and Toned' },
    { value: 'chubby', label: 'Chubby' },
    { value: 'voluptuous', label: 'Voluptuous' },
    { value: 'average', label: 'Average' }
  ]

  // Attire options
  const attireOptions = [
    { value: 'all', label: 'All Attire' },
    { value: 'erotic', label: 'Erotic' },
    { value: 'swimwear', label: 'Swimwear' },
    { value: 'cosplay', label: 'Cosplay' },
    { value: 'sexy', label: 'Sexy' },
    { value: 'underwear', label: 'Underwear' },
    { value: 'semi-nude', label: 'Semi-Nude' },
    { value: 'nude', label: 'Nude' }
  ]

  const [stats, setStats] = useState({
    totalItems: 0,
    activeCreators: 0,
    totalRevenue: '$0',
    avgRating: 0
  })

  // Fetch marketplace stats
  useEffect(() => {
    const fetchMarketplaceStats = async () => {
      try {
        const response = await fetch('/api/marketplace/stats')
        if (response.ok) {
          const data = await response.json()
          setStats(data)
        }
      } catch (error) {
        console.error('Error fetching marketplace stats:', error)
      }
    }

    fetchMarketplaceStats()
  }, [])

  // Fetch marketplace items
  const fetchMarketplaceItems = async (page = 1) => {
    setLoading(true)
    setError(null)
    
    try {
      const params = new URLSearchParams()
      if (selectedCategory !== 'all') params.append('category', selectedCategory)
      if (selectedType !== 'all') params.append('type', selectedType)
      if (minPrice) params.append('minPrice', minPrice)
      if (maxPrice) params.append('maxPrice', maxPrice)
      if (searchTerm) params.append('search', searchTerm)
      params.append('page', page.toString())
      params.append('limit', itemsPerPage.toString())
      
      // Add sub-category parameters
      if (selectedCategory === 'ETHNICITY' && selectedEthnicity !== 'all') {
        params.append('ethnicity', selectedEthnicity)
      }
      if (selectedCategory === 'HAIR_COLOR' && selectedHairColor !== 'all') {
        params.append('hairColor', selectedHairColor)
      }
      if (selectedCategory === 'BODY_TYPE' && selectedBodyType !== 'all') {
        params.append('bodyType', selectedBodyType)
      }
      if (selectedCategory === 'ATTIRE' && selectedAttire !== 'all') {
        params.append('attire', selectedAttire)
      }
      
      const response = await fetch(`/api/marketplace/items?${params.toString()}`)
      if (response.ok) {
        const data = await response.json()
        setItems(data.items || [])
        setTotalPages(data.pagination?.pages || 1)
        setTotalItems(data.pagination?.total || 0)
        setCurrentPage(page)
      } else {
        setError('Failed to fetch marketplace items')
      }
    } catch (error) {
      console.error('Error fetching marketplace items:', error)
      setError('Failed to fetch marketplace items')
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    setCurrentPage(1)
    fetchMarketplaceItems(1)
  }, [selectedCategory, selectedType, minPrice, maxPrice, searchTerm, selectedEthnicity, selectedHairColor, selectedBodyType, selectedAttire, itemsPerPage])

  // Handle category change with NSFW verification
  const handleCategoryChange = (newCategory: string) => {
    if (newCategory === 'NSFW') {
      handleNSFWModeChange(true)
      setSelectedCategory('NSFW')
      return
    } else if (newCategory === 'SFW') {
      handleNSFWModeChange(false)
      setSelectedCategory('SFW')
      return
    }
    setSelectedCategory(newCategory)
  }

  // Update category filter when NSFW mode changes
  useEffect(() => {
    setSelectedCategory(isNSFW ? 'NSFW' : 'SFW')
  }, [isNSFW])

  // Initialize category based on NSFW mode on mount
  useEffect(() => {
    setSelectedCategory(isNSFW ? 'NSFW' : 'SFW')
  }, []) // Run only on mount

  // Pagination component
  const Pagination = () => {
    if (totalPages <= 1) return null

    return (
      <div className="flex flex-col items-center space-y-4 mt-8">
        <div className="flex items-center space-x-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => fetchMarketplaceItems(currentPage - 1)}
            disabled={currentPage === 1}
            style={{
              borderColor: colors.cardBorder,
              color: colors.textPrimary,
              opacity: currentPage === 1 ? 0.5 : 1
            }}
          >
            Previous
          </Button>
          
          <div className="flex space-x-1">
            {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
              let pageNum
              if (totalPages <= 5) {
                pageNum = i + 1
              } else if (currentPage <= 3) {
                pageNum = i + 1
              } else if (currentPage >= totalPages - 2) {
                pageNum = totalPages - 4 + i
              } else {
                pageNum = currentPage - 2 + i
              }
              
              return (
                <Button
                  key={pageNum}
                  variant={currentPage === pageNum ? "default" : "outline"}
                  size="sm"
                  onClick={() => fetchMarketplaceItems(pageNum)}
                  style={{
                    backgroundColor: currentPage === pageNum ? colors.primary : 'transparent',
                    borderColor: colors.cardBorder,
                    color: currentPage === pageNum ? colors.textOnWhite : colors.textPrimary,
                    minWidth: '40px'
                  }}
                >
                  {pageNum}
                </Button>
              )
            })}
          </div>
          
          <Button
            variant="outline"
            size="sm"
            onClick={() => fetchMarketplaceItems(currentPage + 1)}
            disabled={currentPage === totalPages}
            style={{
              borderColor: colors.cardBorder,
              color: colors.textPrimary,
              opacity: currentPage === totalPages ? 0.5 : 1
            }}
          >
            Next
          </Button>
        </div>
        
        <div className="text-sm" style={{ color: colors.textSecondary }}>
          Showing {(currentPage - 1) * itemsPerPage + 1} to {Math.min(currentPage * itemsPerPage, totalItems)} of {totalItems} items
        </div>
      </div>
    )
  }

  // Empty state component
  const EmptyState = () => (
    <div className="text-center py-16">
      <div className="mb-8">
        <Package className="h-24 w-24 mx-auto mb-4" style={{ color: colors.primary }} />
        <h2 className="text-3xl font-bold mb-4" style={{ color: colors.textPrimary }}>
          No Items Found
        </h2>
        <p className="text-lg mb-8 max-w-2xl mx-auto" style={{ color: colors.textSecondary }}>
          {searchTerm || (selectedCategory !== 'all' && selectedCategory !== (isNSFW ? 'NSFW' : 'SFW')) 
            ? 'Try adjusting your filters to see more results.'
            : selectedCategory === 'all' 
              ? `No ${isNSFW ? 'NSFW' : 'SFW'} items found. Try switching to ${isNSFW ? 'SFW' : 'NSFW'} mode or check back later for new content.`
              : 'The marketplace is ready for fresh content. Be the first to list your AI models, prompts, or digital goods!'
          }
        </p>
      </div>
      
      <div className="flex flex-col sm:flex-row gap-4 justify-center items-center">
        {(searchTerm || selectedCategory !== 'all' || selectedType !== 'all') && (
          <Button 
            variant="outline" 
            size="lg"
            className="px-8 py-3 text-lg font-semibold shadow-lg hover:shadow-xl transition-all duration-200 border-2"
            style={{ borderColor: colors.primary, color: colors.primary }}
            onClick={() => {
              setSearchTerm('')
              setSelectedCategory('all')
              setSelectedType('all')
              setMinPrice('')
              setMaxPrice('')
              setSelectedEthnicity('all')
              setSelectedHairColor('all')
              setSelectedBodyType('all')
              setSelectedAttire('all')
            }}
          >
            <RefreshCw className="mr-2 h-5 w-5" />
            Clear Filters
          </Button>
        )}
        
        {user && !searchTerm && selectedCategory === 'all' && (
          <Link href="/marketplace/create">
            <Button 
              size="lg"
              className="px-8 py-3 text-lg font-semibold shadow-lg hover:shadow-xl transition-all duration-200"
              style={{ backgroundColor: colors.primary, color: colors.textOnWhite }}
            >
              <Plus className="mr-2 h-5 w-5" />
              Create First Listing
            </Button>
          </Link>
        )}
        
        {!user && !searchTerm && selectedCategory === 'all' && (
          <Link href="/auth/signin">
            <Button 
              size="lg"
              className="px-8 py-3 text-lg font-semibold shadow-lg hover:shadow-xl transition-all duration-200"
              style={{ backgroundColor: colors.primary, color: colors.textOnWhite }}
            >
              Sign In to Create Listing
            </Button>
          </Link>
        )}
      </div>
    </div>
  )

  // Loading state component
  const LoadingState = () => (
    <div className="flex items-center justify-center py-16">
      <Loader2 className="h-8 w-8 animate-spin" style={{ color: colors.primary }} />
      <span className="ml-2" style={{ color: colors.textSecondary }}>Loading marketplace items...</span>
    </div>
  )

  // Error state component
  const ErrorState = () => (
    <div className="text-center py-16">
      <Info className="h-24 w-24 mx-auto mb-4" style={{ color: colors.primary }} />
      <h2 className="text-3xl font-bold mb-4" style={{ color: colors.textPrimary }}>
        Error Loading Items
      </h2>
      <p className="text-lg mb-8 max-w-2xl mx-auto" style={{ color: colors.textSecondary }}>
        {error}
      </p>
      <Button 
        variant="outline" 
        size="lg"
        className="px-8 py-3 text-lg font-semibold shadow-lg hover:shadow-xl transition-all duration-200 border-2"
        style={{ borderColor: colors.primary, color: colors.primary }}
        onClick={fetchMarketplaceItems}
      >
        <RefreshCw className="mr-2 h-5 w-5" />
        Try Again
      </Button>
    </div>
  )

  return (
    <>
      <div className={`min-h-screen bg-gradient-to-br ${colors.bg}`}>
      {/* Hero Section */}
      <div className="relative h-96 overflow-hidden">
        <div className="absolute inset-0 bg-black/20" />
        <div className="relative z-10 h-full flex items-center justify-center text-center px-4">
          <div>
            <h1 className="text-5xl md:text-6xl font-bold mb-6" style={{ color: colors.textPrimary }}>
              EDN Marketplace
            </h1>
            <p className="text-xl md:text-2xl mb-8 max-w-3xl mx-auto" style={{ color: colors.textSecondary }}>
              Discover and create premium AI models, prompts, and digital goods
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center items-center">
              {user ? (
                <Link href="/marketplace/create">
                  <Button 
                    size="lg"
                    className="px-8 py-3 text-lg font-semibold shadow-lg hover:shadow-xl transition-all duration-200"
                    style={{ backgroundColor: colors.primary, color: colors.textOnWhite }}
                  >
                    <Plus className="mr-2 h-5 w-5" />
                    Create Listing
                  </Button>
                </Link>
              ) : (
                <Link href="/auth/signin">
                  <Button 
                    size="lg"
                    className="px-8 py-3 text-lg font-semibold shadow-lg hover:shadow-xl transition-all duration-200"
                    style={{ backgroundColor: colors.primary, color: colors.textOnWhite }}
                  >
                    Sign In to Start
                  </Button>
                </Link>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Stats Section */}
      <div className="container mx-auto px-4 py-12">
        <div className="grid grid-cols-2 md:grid-cols-4 gap-6 mb-12">
          <Card className="text-center" style={{ backgroundColor: colors.cardBg, borderColor: colors.cardBorder }}>
            <CardContent className="p-6">
              <Package className="h-8 w-8 mx-auto mb-3" style={{ color: colors.primary }} />
              <div className="text-2xl font-bold" style={{ color: colors.primary }}>{stats.totalItems}</div>
              <div className="text-sm" style={{ color: colors.textSecondary }}>Total Items</div>
            </CardContent>
          </Card>
          
          <Card className="text-center" style={{ backgroundColor: colors.cardBg, borderColor: colors.cardBorder }}>
            <CardContent className="p-6">
              <Store className="h-8 w-8 mx-auto mb-3" style={{ color: colors.primary }} />
              <div className="text-2xl font-bold" style={{ color: colors.primary }}>{stats.activeCreators}</div>
              <div className="text-sm" style={{ color: colors.textSecondary }}>Active Creators</div>
            </CardContent>
          </Card>
          
          <Card className="text-center" style={{ backgroundColor: colors.cardBg, borderColor: colors.cardBorder }}>
            <CardContent className="p-6">
              <ShoppingCart className="h-8 w-8 mx-auto mb-3" style={{ color: colors.primary }} />
              <div className="text-2xl font-bold" style={{ color: colors.primary }}>{stats.totalRevenue}</div>
              <div className="text-sm" style={{ color: colors.textSecondary }}>Total Revenue</div>
            </CardContent>
          </Card>
          
          <Card className="text-center" style={{ backgroundColor: colors.cardBg, borderColor: colors.cardBorder }}>
            <CardContent className="p-6">
              <Sparkles className="h-8 w-8 mx-auto mb-3" style={{ color: colors.primary }} />
              <div className="text-2xl font-bold" style={{ color: colors.primary }}>
                {stats.avgRating > 0 ? stats.avgRating.toFixed(1) : 'N/A'}
              </div>
              <div className="text-sm" style={{ color: colors.textSecondary }}>Average Rating</div>
            </CardContent>
          </Card>
        </div>

        {/* Main Content */}
        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className="grid w-full grid-cols-3 mb-8" style={{ backgroundColor: colors.cardBg }}>
            <TabsTrigger 
              value="browse" 
              className="data-[state=active]:bg-white/20"
              style={{ color: colors.textPrimary }}
            >
              <Search className="mr-2 h-4 w-4" />
              Browse
            </TabsTrigger>
            <TabsTrigger 
              value="create" 
              className="data-[state=active]:bg-white/20"
              style={{ color: colors.textPrimary }}
            >
              <Plus className="mr-2 h-4 w-4" />
              Create
            </TabsTrigger>
            <TabsTrigger 
              value="my-listings" 
              className="data-[state=active]:bg-white/20"
              style={{ color: colors.textPrimary }}
            >
              <Upload className="mr-2 h-4 w-4" />
              My Listings
            </TabsTrigger>
          </TabsList>

          <TabsContent value="browse" className="space-y-6">
            {/* Category Tabs */}
            <Card style={{ backgroundColor: colors.cardBg, borderColor: colors.cardBorder }}>
              <CardHeader>
                <CardTitle style={{ color: colors.textPrimary }}>Categories</CardTitle>
                <CardDescription style={{ color: colors.textSecondary }}>
                  Browse by content type and characteristics
                </CardDescription>
              </CardHeader>
              <CardContent>
                <Tabs value={selectedCategory} onValueChange={handleCategoryChange} className="w-full">
                  <TabsList className="grid w-full grid-cols-2 md:grid-cols-6 mb-6" style={{ backgroundColor: colors.cardBg }}>
                    <TabsTrigger 
                      value="all" 
                      className="data-[state=active]:bg-white/20 text-xs md:text-sm"
                      style={{ color: colors.textPrimary }}
                    >
                      All
                    </TabsTrigger>
                    <TabsTrigger 
                      value={isNSFW ? 'NSFW' : 'SFW'} 
                      className="data-[state=active]:bg-white/20 text-xs md:text-sm"
                      style={{ color: colors.textPrimary }}
                    >
                      {isNSFW ? 'NSFW' : 'SFW'}
                    </TabsTrigger>
                    <TabsTrigger 
                      value="ETHNICITY" 
                      className="data-[state=active]:bg-white/20 text-xs md:text-sm"
                      style={{ color: colors.textPrimary }}
                    >
                      Ethnicity
                    </TabsTrigger>
                    <TabsTrigger 
                      value="HAIR_COLOR" 
                      className="data-[state=active]:bg-white/20 text-xs md:text-sm"
                      style={{ color: colors.textPrimary }}
                    >
                      Hair Color
                    </TabsTrigger>
                    <TabsTrigger 
                      value="BODY_TYPE" 
                      className="data-[state=active]:bg-white/20 text-xs md:text-sm"
                      style={{ color: colors.textPrimary }}
                    >
                      Body Type
                    </TabsTrigger>
                    <TabsTrigger 
                      value="ATTIRE" 
                      className="data-[state=active]:bg-white/20 text-xs md:text-sm"
                      style={{ color: colors.textPrimary }}
                    >
                      Attire
                    </TabsTrigger>
                  </TabsList>

                  {/* Sub-category Filters */}
                  {selectedCategory === 'ETHNICITY' && (
                    <div className="mb-6">
                      <label className="block text-sm font-medium mb-3" style={{ color: colors.textSecondary }}>
                        Select Ethnicity
                      </label>
                      <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-3">
                        {ethnicityOptions.map(option => (
                          <Button
                            key={option.value}
                            variant={selectedEthnicity === option.value ? "default" : "outline"}
                            size="sm"
                            className="text-xs md:text-sm"
                            style={{
                              backgroundColor: selectedEthnicity === option.value ? colors.primary : 'transparent',
                              borderColor: colors.cardBorder,
                              color: selectedEthnicity === option.value ? colors.textOnWhite : colors.textPrimary
                            }}
                            onClick={() => setSelectedEthnicity(option.value)}
                          >
                            {option.label}
                          </Button>
                        ))}
                      </div>
                    </div>
                  )}

                  {selectedCategory === 'HAIR_COLOR' && (
                    <div className="mb-6">
                      <label className="block text-sm font-medium mb-3" style={{ color: colors.textSecondary }}>
                        Select Hair Color
                      </label>
                      <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-3">
                        {hairColorOptions.map(option => (
                          <Button
                            key={option.value}
                            variant={selectedHairColor === option.value ? "default" : "outline"}
                            size="sm"
                            className="text-xs md:text-sm"
                            style={{
                              backgroundColor: selectedHairColor === option.value ? colors.primary : 'transparent',
                              borderColor: colors.cardBorder,
                              color: selectedHairColor === option.value ? colors.textOnWhite : colors.textPrimary
                            }}
                            onClick={() => setSelectedHairColor(option.value)}
                          >
                            {option.label}
                          </Button>
                        ))}
                      </div>
                    </div>
                  )}

                  {selectedCategory === 'BODY_TYPE' && (
                    <div className="mb-6">
                      <label className="block text-sm font-medium mb-3" style={{ color: colors.textSecondary }}>
                        Select Body Type
                      </label>
                      <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-3">
                        {bodyTypeOptions.map(option => (
                          <Button
                            key={option.value}
                            variant={selectedBodyType === option.value ? "default" : "outline"}
                            size="sm"
                            className="text-xs md:text-sm"
                            style={{
                              backgroundColor: selectedBodyType === option.value ? colors.primary : 'transparent',
                              borderColor: colors.cardBorder,
                              color: selectedBodyType === option.value ? colors.textOnWhite : colors.textPrimary
                            }}
                            onClick={() => setSelectedBodyType(option.value)}
                          >
                            {option.label}
                          </Button>
                        ))}
                      </div>
                    </div>
                  )}

                  {selectedCategory === 'ATTIRE' && (
                    <div className="mb-6">
                      <label className="block text-sm font-medium mb-3" style={{ color: colors.textSecondary }}>
                        Select Attire
                      </label>
                      <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
                        {attireOptions.map(option => (
                          <Button
                            key={option.value}
                            variant={selectedAttire === option.value ? "default" : "outline"}
                            size="sm"
                            className="text-xs md:text-sm"
                            style={{
                              backgroundColor: selectedAttire === option.value ? colors.primary : 'transparent',
                              borderColor: colors.cardBorder,
                              color: selectedAttire === option.value ? colors.textOnWhite : colors.textPrimary
                            }}
                            onClick={() => setSelectedAttire(option.value)}
                          >
                            {option.label}
                          </Button>
                        ))}
                      </div>
                    </div>
                  )}
                </Tabs>
              </CardContent>
            </Card>

            {/* Additional Filters */}
            <Card style={{ backgroundColor: colors.cardBg, borderColor: colors.cardBorder }}>
              <CardHeader>
                <CardTitle style={{ color: colors.textPrimary }}>Additional Filters</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                  <div>
                    <label className="block text-sm font-medium mb-2" style={{ color: colors.textSecondary }}>
                      Search
                    </label>
                    <div className="relative">
                      <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4" style={{ color: colors.textLight }} />
                      <Input
                        placeholder="Search items..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="pl-10"
                        style={{ 
                          backgroundColor: colors.cardBg,
                          borderColor: colors.cardBorder,
                          color: colors.textPrimary
                        }}
                      />
                    </div>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium mb-2" style={{ color: colors.textSecondary }}>
                      Type
                    </label>
                    <Select value={selectedType} onValueChange={setSelectedType}>
                      <SelectTrigger style={{ 
                        backgroundColor: colors.cardBg,
                        borderColor: colors.cardBorder,
                        color: colors.textPrimary
                      }}>
                        <SelectValue placeholder="All Types" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Types</SelectItem>
                        <SelectItem value="AI_MODEL">AI Model</SelectItem>
                        <SelectItem value="PROMPT">Prompt</SelectItem>
                        <SelectItem value="DIGITAL_GOOD">Digital Good</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium mb-2" style={{ color: colors.textSecondary }}>
                      Min Price
                    </label>
                    <Input
                      type="number"
                      placeholder="0"
                      value={minPrice}
                      onChange={(e) => setMinPrice(e.target.value)}
                      style={{ 
                        backgroundColor: colors.cardBg,
                        borderColor: colors.cardBorder,
                        color: colors.textPrimary
                      }}
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium mb-2" style={{ color: colors.textSecondary }}>
                      Max Price
                    </label>
                    <Input
                      type="number"
                      placeholder="1000"
                      value={maxPrice}
                      onChange={(e) => setMaxPrice(e.target.value)}
                      style={{ 
                        backgroundColor: colors.cardBg,
                        borderColor: colors.cardBorder,
                        color: colors.textPrimary
                      }}
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-2" style={{ color: colors.textSecondary }}>
                      Items Per Page
                    </label>
                    <Select value={itemsPerPage.toString()} onValueChange={(value) => {
                      setItemsPerPage(parseInt(value))
                      setCurrentPage(1)
                    }}>
                      <SelectTrigger style={{ 
                        backgroundColor: colors.cardBg,
                        borderColor: colors.cardBorder,
                        color: colors.textPrimary
                      }}>
                        <SelectValue placeholder="12" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="12">12 per page</SelectItem>
                        <SelectItem value="24">24 per page</SelectItem>
                        <SelectItem value="48">48 per page</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Items Grid */}
            {loading ? (
              <LoadingState />
            ) : error ? (
              <ErrorState />
            ) : items.length === 0 ? (
              <EmptyState />
            ) : (
              <>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                  {items.map((item) => (
                    <MarketplaceItemCard 
                      key={item.id} 
                      item={item} 
                      colors={colors} 
                    />
                  ))}
                </div>
                <Pagination />
              </>
            )}
          </TabsContent>

          <TabsContent value="create" className="space-y-6">
            <Card style={{ backgroundColor: colors.cardBg, borderColor: colors.cardBorder }}>
              <CardHeader>
                <CardTitle style={{ color: colors.textPrimary }}>Create New Listing</CardTitle>
                <CardDescription style={{ color: colors.textSecondary }}>
                  List your AI models, prompts, or digital goods on the marketplace
                </CardDescription>
              </CardHeader>
              <CardContent>
                {user ? (
                  <div className="text-center py-8">
                    <Link href="/marketplace/create">
                      <Button 
                        size="lg"
                        className="px-8 py-3 text-lg font-semibold shadow-lg hover:shadow-xl transition-all duration-200"
                        style={{ backgroundColor: colors.primary, color: colors.textOnWhite }}
                      >
                        <Plus className="mr-2 h-5 w-5" />
                        Create Your First Listing
                      </Button>
                    </Link>
                    <p className="mt-4" style={{ color: colors.textSecondary }}>
                      Start sharing your creations with the community
                    </p>
                  </div>
                ) : (
                  <div className="text-center py-8">
                    <Link href="/auth/signin">
                      <Button 
                        size="lg"
                        className="px-8 py-3 text-lg font-semibold shadow-lg hover:shadow-xl transition-all duration-200"
                        style={{ backgroundColor: colors.primary, color: colors.textOnWhite }}
                      >
                        Sign In to Create Listings
                      </Button>
                    </Link>
                    <p className="mt-4" style={{ color: colors.textSecondary }}>
                      Create an account to start selling on the marketplace
                    </p>
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="my-listings" className="space-y-6">
            <Card style={{ backgroundColor: colors.cardBg, borderColor: colors.cardBorder }}>
              <CardHeader>
                <CardTitle style={{ color: colors.textPrimary }}>My Listings</CardTitle>
                <CardDescription style={{ color: colors.textSecondary }}>
                  Manage your marketplace items and track their performance
                </CardDescription>
              </CardHeader>
              <CardContent>
                {user ? (
                  <div className="text-center py-8">
                    <Package className="h-16 w-16 mx-auto mb-4" style={{ color: colors.primary }} />
                    <h3 className="text-xl font-semibold mb-2" style={{ color: colors.textPrimary }}>
                      No Listings Yet
                    </h3>
                    <p className="mb-4" style={{ color: colors.textSecondary }}>
                      You haven't created any marketplace listings yet
                    </p>
                    <Link href="/marketplace/create">
                      <Button 
                        style={{ backgroundColor: colors.primary, color: colors.textOnWhite }}
                      >
                        <Plus className="mr-2 h-4 w-4" />
                        Create Your First Listing
                      </Button>
                    </Link>
                  </div>
                ) : (
                  <div className="text-center py-8">
                    <Info className="h-16 w-16 mx-auto mb-4" style={{ color: colors.primary }} />
                    <h3 className="text-xl font-semibold mb-2" style={{ color: colors.textPrimary }}>
                      Sign In Required
                    </h3>
                    <p className="mb-4" style={{ color: colors.textSecondary }}>
                      Sign in to view and manage your marketplace listings
                    </p>
                    <Link href="/auth/signin">
                      <Button 
                        style={{ backgroundColor: colors.primary, color: colors.textOnWhite }}
                      >
                        Sign In
                      </Button>
                    </Link>
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
    
    <AgeVerificationModal />
    </>
  )
}