'use client'

import { useState } from 'react'
import Link from 'next/link'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { useNSFW } from '@/contexts/nsfw-context'
import { useAuth } from '@/contexts/auth-context'
import ProtectedStrictImage from '@/components/ui/protected-strict-image'
import { imageIntegrityService, type ImageValidationResult } from '@/lib/image-integrity'
import { 
  ShoppingCart, 
  Eye, 
  Star, 
  Heart, 
  Share2, 
  Download,
  Package,
  User,
  Sparkles,
  AlertTriangle,
  CheckCircle,
  Lock
} from 'lucide-react'

interface MarketplaceItem {
  id: string
  title: string
  description: string
  type: string
  category: string
  price: number
  currency: string
  status: string
  thumbnail?: string
  images?: string[]
  tags?: string[]
  isNsfw: boolean
  userId: string
  user?: {
    id: string
    name: string
    screenName?: string
    avatar?: string
    verified: boolean
  }
  reviews?: Array<{
    rating: number
    comment: string
    createdAt: string
    user: {
      name: string
      avatar?: string
    }
  }>
  _count?: {
    reviews: number
    orders: number
  }
  displayTitle?: string
  isAutoGenerated?: boolean
  positivePrompt?: string
  negativePrompt?: string
  promptConfig?: any
}

interface MarketplaceItemCardStrictProps {
  item: MarketplaceItem
  colors: {
    primary: string
    secondary: string
    accent: string
    bg: string
    particle: string
    cardBg: string
    cardBorder: string
    textPrimary: string
    textSecondary: string
    textLight: string
    textOnWhite: string
  }
  showValidationStatus?: boolean
  onImageError?: (itemId: string, error: string) => void
  onImageValid?: (itemId: string, result: ImageValidationResult) => void
}

export default function MarketplaceItemCardStrict({ 
  item, 
  colors, 
  showValidationStatus = false,
  onImageError,
  onImageValid 
}: MarketplaceItemCardStrictProps) {
  const { user } = useAuth()
  const nsfwContext = useNSFW()
  const isNSFW = nsfwContext?.isNSFW ?? false
  const [imageValidationState, setImageValidationState] = useState<'unknown' | 'valid' | 'error'>('unknown')
  const [imageError, setImageError] = useState<string>('')

  // Parse tags field if it's a string
  const parsedTags = item.tags ? (typeof item.tags === 'string' ? JSON.parse(item.tags) : item.tags) : []
  
  // Hide NSFW items in SFW mode
  if (item.isNsfw && !isNSFW) {
    return null
  }

  // Get the best available image URL with validation
  const getImageUrl = () => {
    // Try thumbnail first, then first image from images array
    let imageUrl = item.thumbnail
    
    if (!imageUrl && item.images && item.images.length > 0) {
      imageUrl = item.images[0]
    }
    
    return imageUrl
  }

  const imageUrl = getImageUrl()

  // Handle image validation events
  const handleImageError = (error: string) => {
    setImageValidationState('error')
    setImageError(error)
    onImageError?.(item.id, error)
  }

  const handleImageValid = (result: ImageValidationResult) => {
    setImageValidationState('valid')
    setImageError('')
    onImageValid?.(item.id, result)
  }

  // Calculate average rating
  const averageRating = item.reviews && item.reviews.length > 0 
    ? item.reviews.reduce((sum, review) => sum + review.rating, 0) / item.reviews.length 
    : 0

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: item.currency || 'USD'
    }).format(price)
  }

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'AI_MODEL':
        return <Sparkles className="h-4 w-4" />
      case 'PROMPT':
        return <Package className="h-4 w-4" />
      case 'DIGITAL_GOOD':
        return <Download className="h-4 w-4" />
      default:
        return <Package className="h-4 w-4" />
    }
  }

  const getTypeLabel = (type: string) => {
    switch (type) {
      case 'AI_MODEL':
        return 'AI Model'
      case 'PROMPT':
        return 'Prompt'
      case 'DIGITAL_GOOD':
        return 'Digital Good'
      default:
        return type
    }
  }

  // If no image URL is available, don't show the card at all (strict mode)
  if (!imageUrl) {
    return null
  }

  return (
    <Card 
      className="group overflow-hidden transition-all duration-300 hover:shadow-xl hover:scale-105"
      style={{ 
        backgroundColor: colors.cardBg, 
        borderColor: colors.cardBorder,
        borderWidth: '1px'
      }}
    >
      <div className="relative">
        {/* Thumbnail with strict validation */}
        <div className="aspect-square relative overflow-hidden bg-gradient-to-br from-gray-100 to-gray-200">
          <div className="relative w-full h-full">
            <ProtectedStrictImage
              src={imageUrl}
              alt={item.displayTitle || item.title}
              className="w-full h-full object-cover transition-transform duration-300 group-hover:scale-110"
              context={`Marketplace item ${item.id}: ${item.displayTitle || item.title}`}
              protectionOptions={{
                showWatermark: true,
                watermarkText: 'EDN Protected'
              }}
              onImageError={handleImageError}
              onImageValid={handleImageValid}
              showValidationStatus={showValidationStatus}
            />
            
            {/* Validation status overlay */}
            {showValidationStatus && (
              <div className="absolute top-2 left-2 z-10">
                {imageValidationState === 'valid' && (
                  <div className="bg-green-500 text-white text-xs px-2 py-1 rounded-full flex items-center gap-1">
                    <CheckCircle className="w-3 h-3" />
                    Image Valid
                  </div>
                )}
                {imageValidationState === 'error' && (
                  <div className="bg-red-500 text-white text-xs px-2 py-1 rounded-full flex items-center gap-1">
                    <AlertTriangle className="w-3 h-3" />
                    Image Error
                  </div>
                )}
                {imageValidationState === 'unknown' && (
                  <div className="bg-yellow-500 text-white text-xs px-2 py-1 rounded-full flex items-center gap-1">
                    <div className="w-3 h-3 border-2 border-white border-t-transparent rounded-full animate-spin" />
                    Validating...
                  </div>
                )}
              </div>
            )}
            
            {/* EDN Protected overlay */}
            <div className="absolute bottom-1 right-1 bg-black/60 text-white text-xs px-1 py-0.5 rounded opacity-70 pointer-events-none">
              EDN Protected
            </div>
          </div>
          
          {/* Overlay */}
          <div className="absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-all duration-300" />
          
          {/* Quick Actions */}
          <div className="absolute top-2 right-2 flex flex-col gap-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
            <Button 
              size="sm" 
              variant="secondary" 
              className="h-8 w-8 p-0 rounded-full"
              style={{ backgroundColor: colors.cardBg, borderColor: colors.cardBorder }}
            >
              <Heart className="h-4 w-4" />
            </Button>
            <Button 
              size="sm" 
              variant="secondary" 
              className="h-8 w-8 p-0 rounded-full"
              style={{ backgroundColor: colors.cardBg, borderColor: colors.cardBorder }}
            >
              <Share2 className="h-4 w-4" />
            </Button>
          </div>
          
          {/* Category Badge */}
          <div className="absolute top-2 left-2">
            <Badge 
              variant="secondary" 
              className="text-xs font-semibold"
              style={{ 
                backgroundColor: colors.primary, 
                color: colors.textOnWhite 
              }}
            >
              {getTypeLabel(item.type)}
            </Badge>
          </div>
          
          {/* NSFW Badge */}
          {item.isNsfw && (
            <div className="absolute bottom-2 left-2">
              <Badge 
                variant="destructive" 
                className="text-xs font-semibold"
              >
                NSFW
              </Badge>
            </div>
          )}
        </div>
      </div>

      <CardHeader className="pb-2">
        <div className="flex items-start justify-between gap-2">
          <div className="flex-1 min-w-0">
            <CardTitle 
              className="text-lg font-bold line-clamp-2 transition-colors duration-200 group-hover:text-blue-600"
              style={{ color: colors.textPrimary }}
            >
              {item.displayTitle || item.title}
            </CardTitle>
            <CardDescription 
              className="text-sm line-clamp-2 mt-1"
              style={{ color: colors.textSecondary }}
            >
              {item.description}
            </CardDescription>
          </div>
          <div className="flex flex-col items-end gap-1">
            <div className="text-lg font-bold" style={{ color: colors.primary }}>
              {formatPrice(item.price)}
            </div>
            {item._count?.orders && item._count.orders > 0 && (
              <div className="text-xs" style={{ color: colors.textLight }}>
                {item._count.orders} sold
              </div>
            )}
          </div>
        </div>
      </CardHeader>

      <CardContent className="pt-0">
        {/* Creator Info */}
        <div className="flex items-center gap-2 mb-3">
          {item.user?.avatar ? (
            <img 
              src={item.user.avatar} 
              alt={item.user.name} 
              className="w-6 h-6 rounded-full object-cover"
            />
          ) : (
            <div className="w-6 h-6 rounded-full flex items-center justify-center" style={{ backgroundColor: colors.primary }}>
              <User className="h-3 w-3 text-white" />
            </div>
          )}
          <span className="text-sm font-medium truncate" style={{ color: colors.textSecondary }}>
            {item.user?.name || 'Unknown Creator'}
          </span>
          {item.user?.verified && (
            <Badge variant="outline" className="text-xs">
              ✓
            </Badge>
          )}
        </div>

        {/* Tags */}
        {parsedTags.length > 0 && (
          <div className="flex flex-wrap gap-1 mb-3">
            {parsedTags.slice(0, 3).map((tag, index) => (
              <Badge 
                key={index} 
                variant="outline" 
                className="text-xs"
                style={{ 
                  borderColor: colors.cardBorder,
                  color: colors.textLight 
                }}
              >
                {tag}
              </Badge>
            ))}
            {parsedTags.length > 3 && (
              <Badge 
                variant="outline" 
                className="text-xs"
                style={{ 
                  borderColor: colors.cardBorder,
                  color: colors.textLight 
                }}
              >
                +{parsedTags.length - 3}
              </Badge>
            )}
          </div>
        )}

        {/* Prompt Preview (only for AI_MODEL and PROMPT types) */}
        {(item.type === 'AI_MODEL' || item.type === 'PROMPT') && (item.positivePrompt || item.negativePrompt) && (
          <div className="mb-3">
            <div className="flex items-center gap-1 mb-1">
              <Lock className="h-3 w-3" style={{ color: colors.textLight }} />
              <span className="text-xs font-medium" style={{ color: colors.textSecondary }}>
                Prompt Preview
              </span>
            </div>
            <div 
              className="text-xs p-2 rounded border bg-opacity-50 backdrop-blur-sm transition-all duration-300"
              style={{
                backgroundColor: colors.cardBg,
                borderColor: colors.cardBorder,
                filter: 'blur(4px)',
                userSelect: 'none',
                pointerEvents: 'none' as const
              }}
            >
              {item.positivePrompt ? 
                item.positivePrompt.substring(0, 60) + (item.positivePrompt.length > 60 ? '...' : '') : 
                item.negativePrompt?.substring(0, 60) + (item.negativePrompt.length > 60 ? '...' : '')
              }
            </div>
            <div className="text-xs text-gray-500 dark:text-gray-400 mt-1 italic" style={{ color: colors.textLight }}>
              Full prompt and config available after purchase
            </div>
          </div>
        )}

        {/* Rating and Reviews */}
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center gap-1">
            <Star className="h-4 w-4 fill-yellow-400 text-yellow-400" />
            <span className="text-sm font-medium" style={{ color: colors.textPrimary }}>
              {averageRating > 0 ? averageRating.toFixed(1) : 'New'}
            </span>
            {item._count?.reviews && item._count.reviews > 0 && (
              <span className="text-xs" style={{ color: colors.textLight }}>
                ({item._count.reviews})
              </span>
            )}
          </div>
          
          <div className="flex items-center gap-1 text-xs" style={{ color: colors.textLight }}>
            {getTypeIcon(item.type)}
            <span>{getTypeLabel(item.type)}</span>
          </div>
        </div>

        {/* Action Buttons */}
        <div className="flex gap-2">
          <Link href={`/marketplace/${item.id}`} className="flex-1">
            <Button 
              variant="outline" 
              className="w-full text-sm"
              style={{ 
                borderColor: colors.primary,
                color: colors.primary 
              }}
            >
              <Eye className="h-4 w-4 mr-2" />
              View Details
            </Button>
          </Link>
          
          <Button 
            className="flex-1 text-sm"
            style={{ 
              backgroundColor: colors.primary, 
              color: colors.textOnWhite 
            }}
          >
            <ShoppingCart className="h-4 w-4 mr-2" />
            Buy Now
          </Button>
        </div>
      </CardContent>
    </Card>
  )
}